
# NAME

listenkey - access incoming user input events, optionally consuming them

# SYNOPSIS

listenkey [-wvkmbcCiedsSh]

# DESCRIPTION

*listenkey* provides access to incoming user input events, optionally withholding them from applications.
This will for example allow a user to process key or mouse events arbitrarily and send them along to applications using *sendkey*(1).
The output format is described in *keyboa-API*(5).
If none of *-wv* is given, libkeyboa will guess at the most appropriate mode in the current environment.
This may change, but currently means:

- *-w* if Windows mode is supported
- *-v* otherwise

*listenkey* distinguishes between **injected** and **non-injected** events.
The exact meanings of these depend on the mode, but the general idea is that
non-injected events are considered manually or naturally produced, e.g. they originate with hardware,
while injected events are considered artificial, e.g. they originate with automation software.
This distinction is what makes it possible to pipe events from *listenkey* to *sendkey* without creating an infinite loop.
A common usage is to let *listenkey* consume and print only non-injected events, which will exclude the events sent (injected) by *sendkey*.
In Windows mode, an event is considered injected if and only if it has the LLKHF_INJECTED flag set (see the **win_injected** field in *keyboa-API*(5)).

Note that not all combinations of options are supported.

# OPTIONS

*-w*
	Windows mode: Receive events through Windows API.

*-v*
	VNC mode: Receive events through an x11vnc proxy.

*-k*
	Print keyboard events. This option is on by default unless -m or -b is provided.

*-m*
	Print mouse move events.

*-b*
	Print mouse button and mouse wheel events (all mouse events except mouse move).

*-c*
	Consume non-injected events, of all types specified with *-k*, *-m* and *-b*.
	This prevents the specified events from reaching applications.

*-C*
	Consume injected events, of all types specified with *-k*, *-m* and *-b*.
	This prevents the specified events from reaching applications.

*-i*
	Also print injected events, of all types specified with *-k*, *-m* and *-b*.
	Without this flag, only non-injected events are printed.

*-e*
	Exit when escape key is pressed.

*-d*
	Exit after 20 events are processed (useful for debugging).

*-s*
	At startup, print a message containing information about the current keyboard layout and state.

*-S*
	Exit after printing startup message (implies -s).

*-h*
	Print help and exit.

# WARNINGS AND BUGS

Keyboa is in alpha stage. The CLI interface to *listenkey* and its output format *keyboa-API* will not be stable until the release of keyboa version 2.0.0.

When *listenkey* is called with the *-c* option, it will prevent key events from reaching the applications.
Unless you use it in combination with the *-e* or *-d* option, you run the risk of partially losing control of your computer.
This particular foot gun is necessary for the core functionality, so it will stay this way.
For every-day use, the recommended and conservative choice is to use *-c* in combination with *-e*.
This way you can at least exit *listenkey* by pressing Esc.
Unfortunately, this means you will have to design your layout to not rely on the Esc key.

For security reasons, Windows does not allow all key events to be scoped up by an application like keyboa is attempting to do. Sometimes, a key down event can be sent to keyboa while the key up event is withheld. This can for example happen when Win+L is pressed to lock the desktop, or when switching to an application running with elevated privileges. From the perspective of a processor consuming the listenkey output stream, this will appear like a key being held down indefinitely. There is library functionality that attempts to compensate for this situation (unstick_keys), but it is not perfect.

# AUTHOR

Axel Svensson <mail@axelsvensson.com>

# VERSION

This manual page is part of keyboa version <VERSION>.

# SEE ALSO

*sendkey*(1), *keyboa-API*(5)
